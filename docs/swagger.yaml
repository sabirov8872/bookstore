basePath: /
definitions:
  types.Author:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  types.Book:
    properties:
      author:
        type: string
      bookName:
        type: string
      filename:
        type: string
      genre:
        type: string
      id:
        type: integer
      isbn:
        type: string
    type: object
  types.CreateBookRequest:
    properties:
      author:
        type: string
      bookName:
        type: string
      genre:
        type: string
      isbn:
        type: string
    type: object
  types.CreateBookResponse:
    properties:
      bookId:
        type: integer
    type: object
  types.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  types.CreateUserResponse:
    properties:
      userId:
        type: integer
    type: object
  types.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  types.Genre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  types.GetUserByUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  types.GetUserByUserResponse:
    properties:
      token:
        type: string
      userId:
        type: integer
    type: object
  types.ListAuthors:
    properties:
      authorsCount:
        type: integer
      items:
        items:
          $ref: '#/definitions/types.Author'
        type: array
    type: object
  types.ListBookResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/types.Book'
        type: array
    type: object
  types.ListGenres:
    properties:
      genresCount:
        type: integer
      items:
        items:
          $ref: '#/definitions/types.Genre'
        type: array
    type: object
  types.ListUserResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/types.User'
        type: array
    type: object
  types.UpdateBookRequest:
    properties:
      author:
        type: string
      bookName:
        type: string
      genre:
        type: string
      isbn:
        type: string
    type: object
  types.UpdateUserByIdRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userRole:
        type: string
      username:
        type: string
    type: object
  types.UpdateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  types.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      phone:
        type: string
      userRole:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: Bookstore
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: User username and password are checked
      parameters:
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.GetUserByUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.GetUserByUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: User verification
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: A new user will be created. Hashed before saving to database.
      parameters:
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.CreateUserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Create a new user
      tags:
      - auth
  /authors:
    get:
      consumes:
      - application/json
      description: All author data is retrieved from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ListAuthors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get all authors
      tags:
      - books
  /books:
    get:
      consumes:
      - application/json
      description: All book data is retrieved from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ListBookResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: A new book is created using the given information.
      parameters:
      - description: Book data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.CreateBookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: The book will be deleted using the given data.
      parameters:
      - description: Book id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete book by id
      tags:
      - books
    get:
      consumes:
      - application/json
      description: User information is obtained by id and data.
      parameters:
      - description: Book id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: The requested book data
          schema:
            $ref: '#/definitions/types.Book'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get book by id
      tags:
      - books
    put:
      consumes:
      - application/json
      description: The book will be updated using the given id and data.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update book by id
      tags:
      - books
  /files/{id}:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves an object from the Minio bucket by its
        name.
      parameters:
      - description: Book id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/pdf
      responses:
        "200":
          description: Book file
          schema:
            type: file
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get book file
      tags:
      - books
    post:
      consumes:
      - multipart/form-data
      description: Upload a file for the specified book ID, replacing the existing
        file if any.
      parameters:
      - description: Book id
        in: path
        name: id
        required: true
        type: integer
      - description: Book file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload book file
      tags:
      - books
  /genres:
    get:
      consumes:
      - application/json
      description: All genres data is retrieved from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ListGenres'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get all genres
      tags:
      - books
  /users:
    get:
      consumes:
      - application/json
      description: All user data is retrieved from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ListUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - users
    put:
      consumes:
      - application/json
      description: User information is updated using the provided information.
      parameters:
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: User data will be deleted using the given information.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user by id
      tags:
      - users
    get:
      consumes:
      - application/json
      description: User information is obtained by id.
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by id
      tags:
      - users
    put:
      consumes:
      - application/json
      description: The user will be updated using the given data.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserByIdRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user by id
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
