basePath: /
definitions:
  types.Book:
    properties:
      author:
        type: string
      genre:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  types.CreateBookRequest:
    properties:
      author:
        type: string
      genre:
        type: string
      name:
        type: string
    type: object
  types.CreateBookResponse:
    properties:
      bookId:
        type: integer
    type: object
  types.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  types.CreateUserResponse:
    properties:
      userId:
        type: integer
    type: object
  types.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  types.GetUserByUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  types.GetUserByUserResponse:
    properties:
      token:
        type: string
      userId:
        type: integer
    type: object
  types.ListBookResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/types.Book'
        type: array
    type: object
  types.ListUserResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/types.User'
        type: array
    type: object
  types.UpdateBookRequest:
    properties:
      author:
        type: string
      genre:
        type: string
      name:
        type: string
    type: object
  types.UpdateUserByIdRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userRole:
        type: string
      username:
        type: string
    type: object
  types.UpdateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  types.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      phone:
        type: string
      userRole:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: Bookstore
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: check username and password
      parameters:
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.GetUserByUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.GetUserByUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Check user
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.CreateUserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Create user
      tags:
      - auth
  /books:
    get:
      consumes:
      - application/json
      description: get all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ListBookResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: create book
      parameters:
      - description: Book data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.CreateBookResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: delete book by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete book by id
      tags:
      - books
    get:
      consumes:
      - application/json
      description: get book by id
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Book'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get book by id
      tags:
      - books
    put:
      consumes:
      - application/json
      description: update book by id
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update book by id
      tags:
      - books
  /files:
    post:
      consumes:
      - multipart/form-data
      description: Loads a file using multipart/form-data and saves it to MinIO
      parameters:
      - description: File (JPG, PNG, etc.)
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: File upload
      tags:
      - files
  /files/{objectName}:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves an object from the Minio bucket by its
        name.
      parameters:
      - description: Name of the object to retrieve
        in: path
        name: objectName
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: The requested object file
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get an object from the Minio
      tags:
      - files
  /users:
    get:
      consumes:
      - application/json
      description: get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ListUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user by id
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get user by id
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by id
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserByIdRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user by id
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
