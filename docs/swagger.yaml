basePath: /
definitions:
  types.Author:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  types.Book:
    properties:
      author:
        $ref: '#/definitions/types.Author'
      createdAt:
        type: string
      description:
        type: string
      filename:
        type: string
      genre:
        $ref: '#/definitions/types.Genre'
      id:
        type: integer
      isbn:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  types.CreateAuthorRequest:
    properties:
      name:
        type: string
    type: object
  types.CreateAuthorResponse:
    properties:
      authorId:
        type: integer
    type: object
  types.CreateBookRequest:
    properties:
      authorId:
        type: integer
      description:
        type: string
      genreId:
        type: integer
      isbn:
        type: string
      name:
        type: string
    type: object
  types.CreateBookResponse:
    properties:
      bookId:
        type: integer
    type: object
  types.CreateGenreRequest:
    properties:
      name:
        type: string
    type: object
  types.CreateGenreResponse:
    properties:
      genreId:
        type: integer
    type: object
  types.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  types.CreateUserResponse:
    properties:
      userId:
        type: integer
    type: object
  types.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  types.Genre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  types.GetUserByUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  types.GetUserByUserResponse:
    properties:
      token:
        type: string
      userId:
        type: integer
    type: object
  types.ListAuthorResponse:
    properties:
      authorsCount:
        type: integer
      items:
        items:
          $ref: '#/definitions/types.Author'
        type: array
    type: object
  types.ListBookResponse:
    properties:
      booksCount:
        type: integer
      items:
        items:
          $ref: '#/definitions/types.Book'
        type: array
    type: object
  types.ListGenreResponse:
    properties:
      genresCount:
        type: integer
      items:
        items:
          $ref: '#/definitions/types.Genre'
        type: array
    type: object
  types.ListUserResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/types.User'
        type: array
      usersCount:
        type: integer
    type: object
  types.UpdateAuthorRequest:
    properties:
      name:
        type: string
    type: object
  types.UpdateBookRequest:
    properties:
      authorId:
        type: integer
      description:
        type: string
      genreId:
        type: integer
      isbn:
        type: string
      name:
        type: string
    type: object
  types.UpdateGenreRequest:
    properties:
      name:
        type: string
    type: object
  types.UpdateUserByIdRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userRole:
        type: string
      username:
        type: string
    type: object
  types.UpdateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  types.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      phone:
        type: string
      userRole:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: Bookstore
  version: "1.0"
paths:
  /authors:
    get:
      consumes:
      - application/json
      description: For admins, users and guests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ListAuthorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get all authors
      tags:
      - authors
    post:
      consumes:
      - application/json
      description: For admins
      parameters:
      - description: Author data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateAuthorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.CreateAuthorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new author
      tags:
      - authors
  /authors/{id}:
    delete:
      consumes:
      - application/json
      description: For admins
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete author by id
      tags:
      - authors
    get:
      consumes:
      - application/json
      description: For admins, users and guests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Author'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get author by id
      tags:
      - authors
    put:
      consumes:
      - application/json
      description: For admins
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      - description: Author data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateAuthorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update author by id
      tags:
      - authors
  /books:
    get:
      consumes:
      - application/json
      description: For admins, users and guests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ListBookResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: For admins
      parameters:
      - description: Book data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.CreateBookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: For admins
      parameters:
      - description: Book id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete book by id
      tags:
      - books
    get:
      consumes:
      - application/json
      description: For admins, users and guests
      parameters:
      - description: Book id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get book by id
      tags:
      - books
    put:
      consumes:
      - application/json
      description: For admins
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update book by id
      tags:
      - books
  /files/{id}:
    get:
      consumes:
      - application/json
      description: For admins, users and guests
      parameters:
      - description: Book id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/pdf
      responses:
        "200":
          description: Book file
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get book file by book id
      tags:
      - files
    post:
      consumes:
      - multipart/form-data
      description: For admins
      parameters:
      - description: Book id
        in: path
        name: id
        required: true
        type: integer
      - description: Book pdf file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload book file by book id
      tags:
      - files
  /genres:
    get:
      consumes:
      - application/json
      description: For admins, users and guests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ListGenreResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get all genres
      tags:
      - genres
    post:
      consumes:
      - application/json
      description: For admins
      parameters:
      - description: Genre data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateGenreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.CreateGenreResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new genre
      tags:
      - genres
  /genres/{id}:
    delete:
      consumes:
      - application/json
      description: For admins
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete genre by id
      tags:
      - genres
    put:
      consumes:
      - application/json
      description: For admins
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      - description: Genre data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateGenreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update genre by id
      tags:
      - genres
  /sign-in:
    post:
      consumes:
      - application/json
      description: For users and admins
      parameters:
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.GetUserByUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.GetUserByUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: User verification
      tags:
      - auth
  /sign-up:
    post:
      consumes:
      - application/json
      description: For users
      parameters:
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Registration
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: For admins
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ListUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - users
    put:
      consumes:
      - application/json
      description: For users and admins
      parameters:
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: For admins
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user by id
      tags:
      - users
    get:
      consumes:
      - application/json
      description: For admins
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by id
      tags:
      - users
    put:
      consumes:
      - application/json
      description: For admins
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserByIdRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user by id
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
